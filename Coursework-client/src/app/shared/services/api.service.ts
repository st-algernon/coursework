//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAuthClient {
    login(request: LoginQuery): Observable<AuthResponse>;
    register(request: RegisterQuery): Observable<AuthResponse>;
    refreshToken(request: RefreshTokenQuery): Observable<AuthResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient implements IAuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(request: LoginQuery): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthResponse>(null as any);
    }

    register(request: RegisterQuery): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponse>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthResponse>(null as any);
    }

    refreshToken(request: RefreshTokenQuery): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponse>;
        }));
    }

    protected processRefreshToken(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthResponse>(null as any);
    }
}

export interface ICollectionsClient {
    createCollection(request: CreateCollectionCommand): Observable<void>;
    getCollection(id: string): Observable<CollectionVm>;
    removeCollection(id: string): Observable<void>;
    getShortCollection(id: string): Observable<ShortCollectionVm>;
    getUserCollections(userId: string): Observable<ShortCollectionVm[]>;
    getLargestCollections(): Observable<ShortCollectionVm[]>;
    editCollection(request: EditCollectionCommand): Observable<void>;
    uploadCover(): Observable<string>;
    getCollectionFields(id: string): Observable<FieldWithTypeNameVm[]>;
    getCollectionTags(id: string): Observable<TagVm[]>;
    getFieldTypes(): Observable<FieldTypeVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CollectionsClient implements ICollectionsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createCollection(request: CreateCollectionCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Collections/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateCollection(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    getCollection(id: string): Observable<CollectionVm> {
        let url_ = this.baseUrl + "/api/Collections/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionVm>;
        }));
    }

    protected processGetCollection(response: HttpResponseBase): Observable<CollectionVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollectionVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionVm>(null as any);
    }

    removeCollection(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Collections/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveCollection(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    getShortCollection(id: string): Observable<ShortCollectionVm> {
        let url_ = this.baseUrl + "/api/Collections/short/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShortCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShortCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortCollectionVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortCollectionVm>;
        }));
    }

    protected processGetShortCollection(response: HttpResponseBase): Observable<ShortCollectionVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShortCollectionVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortCollectionVm>(null as any);
    }

    getUserCollections(userId: string): Observable<ShortCollectionVm[]> {
        let url_ = this.baseUrl + "/api/Collections/owner/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserCollections(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserCollections(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortCollectionVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortCollectionVm[]>;
        }));
    }

    protected processGetUserCollections(response: HttpResponseBase): Observable<ShortCollectionVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortCollectionVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortCollectionVm[]>(null as any);
    }

    getLargestCollections(): Observable<ShortCollectionVm[]> {
        let url_ = this.baseUrl + "/api/Collections/largest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLargestCollections(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLargestCollections(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortCollectionVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortCollectionVm[]>;
        }));
    }

    protected processGetLargestCollections(response: HttpResponseBase): Observable<ShortCollectionVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortCollectionVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortCollectionVm[]>(null as any);
    }

    editCollection(request: EditCollectionCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Collections/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEditCollection(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    uploadCover(): Observable<string> {
        let url_ = this.baseUrl + "/api/Collections/cover";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadCover(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadCover(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUploadCover(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    getCollectionFields(id: string): Observable<FieldWithTypeNameVm[]> {
        let url_ = this.baseUrl + "/api/Collections/{id}/fields";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollectionFields(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollectionFields(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldWithTypeNameVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldWithTypeNameVm[]>;
        }));
    }

    protected processGetCollectionFields(response: HttpResponseBase): Observable<FieldWithTypeNameVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FieldWithTypeNameVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FieldWithTypeNameVm[]>(null as any);
    }

    getCollectionTags(id: string): Observable<TagVm[]> {
        let url_ = this.baseUrl + "/api/Collections/{id}/tags";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollectionTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollectionTags(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TagVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TagVm[]>;
        }));
    }

    protected processGetCollectionTags(response: HttpResponseBase): Observable<TagVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TagVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagVm[]>(null as any);
    }

    getFieldTypes(): Observable<FieldTypeVm[]> {
        let url_ = this.baseUrl + "/api/Collections/field-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFieldTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFieldTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FieldTypeVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FieldTypeVm[]>;
        }));
    }

    protected processGetFieldTypes(response: HttpResponseBase): Observable<FieldTypeVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FieldTypeVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FieldTypeVm[]>(null as any);
    }
}

export interface ICommentsClient {
    getComments(itemId: string): Observable<CommentVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CommentsClient implements ICommentsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getComments(itemId: string): Observable<CommentVm[]> {
        let url_ = this.baseUrl + "/api/Comments/{itemId}";
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetComments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetComments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommentVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommentVm[]>;
        }));
    }

    protected processGetComments(response: HttpResponseBase): Observable<CommentVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommentVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CommentVm[]>(null as any);
    }
}

export interface IItemsClient {
    createItem(request: CreateItemCommand): Observable<void>;
    getShortItems(collectionId?: string | undefined): Observable<ShortItemVm[]>;
    searchItems(query?: string | null | undefined, searchBy?: SearchBy | undefined): Observable<ShortItemVm[]>;
    getLastAddedItems(page?: number | undefined, size?: number | undefined): Observable<ShortItemVm[]>;
    getItem(id: string): Observable<ItemVm>;
    removeItem(id: string): Observable<void>;
    editItem(request: EditItemCommand): Observable<void>;
    likeItem(id: string): Observable<void>;
    uploadCover(): Observable<string>;
    searchTags(query: string | null): Observable<TagVm[]>;
    getTopTags(): Observable<TagVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ItemsClient implements IItemsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createItem(request: CreateItemCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Items/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateItem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateItem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    getShortItems(collectionId?: string | undefined): Observable<ShortItemVm[]> {
        let url_ = this.baseUrl + "/api/Items/short?";
        if (collectionId === null)
            throw new Error("The parameter 'collectionId' cannot be null.");
        else if (collectionId !== undefined)
            url_ += "collectionId=" + encodeURIComponent("" + collectionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShortItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShortItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortItemVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortItemVm[]>;
        }));
    }

    protected processGetShortItems(response: HttpResponseBase): Observable<ShortItemVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortItemVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortItemVm[]>(null as any);
    }

    searchItems(query?: string | null | undefined, searchBy?: SearchBy | undefined): Observable<ShortItemVm[]> {
        let url_ = this.baseUrl + "/api/Items/search?";
        if (query !== undefined && query !== null)
            url_ += "Query=" + encodeURIComponent("" + query) + "&";
        if (searchBy === null)
            throw new Error("The parameter 'searchBy' cannot be null.");
        else if (searchBy !== undefined)
            url_ += "SearchBy=" + encodeURIComponent("" + searchBy) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortItemVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortItemVm[]>;
        }));
    }

    protected processSearchItems(response: HttpResponseBase): Observable<ShortItemVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortItemVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortItemVm[]>(null as any);
    }

    getLastAddedItems(page?: number | undefined, size?: number | undefined): Observable<ShortItemVm[]> {
        let url_ = this.baseUrl + "/api/Items/last?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLastAddedItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLastAddedItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ShortItemVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ShortItemVm[]>;
        }));
    }

    protected processGetLastAddedItems(response: HttpResponseBase): Observable<ShortItemVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShortItemVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortItemVm[]>(null as any);
    }

    getItem(id: string): Observable<ItemVm> {
        let url_ = this.baseUrl + "/api/Items/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetItem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ItemVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ItemVm>;
        }));
    }

    protected processGetItem(response: HttpResponseBase): Observable<ItemVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemVm>(null as any);
    }

    removeItem(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Items/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveItem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveItem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    editItem(request: EditItemCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Items/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditItem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEditItem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    likeItem(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Items/like/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLikeItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLikeItem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLikeItem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    uploadCover(): Observable<string> {
        let url_ = this.baseUrl + "/api/Items/cover";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadCover(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadCover(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUploadCover(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    searchTags(query: string | null): Observable<TagVm[]> {
        let url_ = this.baseUrl + "/api/Items/search-tags/{query}";
        if (query === undefined || query === null)
            throw new Error("The parameter 'query' must be defined.");
        url_ = url_.replace("{query}", encodeURIComponent("" + query));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchTags(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TagVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TagVm[]>;
        }));
    }

    protected processSearchTags(response: HttpResponseBase): Observable<TagVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TagVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagVm[]>(null as any);
    }

    getTopTags(): Observable<TagVm[]> {
        let url_ = this.baseUrl + "/api/Items/top-tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTopTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTopTags(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TagVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TagVm[]>;
        }));
    }

    protected processGetTopTags(response: HttpResponseBase): Observable<TagVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TagVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagVm[]>(null as any);
    }
}

export interface ITopicsClient {
    getTopics(): Observable<Topic[]>;
}

@Injectable({
    providedIn: 'root'
})
export class TopicsClient implements ITopicsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTopics(): Observable<Topic[]> {
        let url_ = this.baseUrl + "/api/Topics";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTopics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTopics(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Topic[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Topic[]>;
        }));
    }

    protected processGetTopics(response: HttpResponseBase): Observable<Topic[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Topic.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Topic[]>(null as any);
    }
}

export interface IUsersClient {
    getCurrentUser(): Observable<UserVm>;
    getUserById(id: string): Observable<UserVm>;
    searchUsers(query: string | null): Observable<UserVm[]>;
    getUsers(page?: number | undefined, size?: number | undefined): Observable<UserVm[]>;
    getUsersCount(): Observable<number>;
    blockUser(id: string): Observable<void>;
    unblockUser(id: string): Observable<void>;
    removeUser(id: string): Observable<void>;
    addAdmin(id: string): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCurrentUser(): Observable<UserVm> {
        let url_ = this.baseUrl + "/api/Users/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserVm>;
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<UserVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserVm>(null as any);
    }

    getUserById(id: string): Observable<UserVm> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserVm>;
        }));
    }

    protected processGetUserById(response: HttpResponseBase): Observable<UserVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserVm>(null as any);
    }

    searchUsers(query: string | null): Observable<UserVm[]> {
        let url_ = this.baseUrl + "/api/Users/search/{query}";
        if (query === undefined || query === null)
            throw new Error("The parameter 'query' must be defined.");
        url_ = url_.replace("{query}", encodeURIComponent("" + query));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserVm[]>;
        }));
    }

    protected processSearchUsers(response: HttpResponseBase): Observable<UserVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserVm[]>(null as any);
    }

    getUsers(page?: number | undefined, size?: number | undefined): Observable<UserVm[]> {
        let url_ = this.baseUrl + "/api/Users?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserVm[]>;
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<UserVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserVm[]>(null as any);
    }

    getUsersCount(): Observable<number> {
        let url_ = this.baseUrl + "/api/Users/count";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersCount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processGetUsersCount(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    blockUser(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/block/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBlockUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBlockUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processBlockUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    unblockUser(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/unblock/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnblockUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnblockUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUnblockUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    removeUser(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/remove/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    addAdmin(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/add-admin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAdmin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddAdmin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class AuthResponse implements IAuthResponse {
    accessToken!: string;
    refreshToken!: string;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"] !== undefined ? _data["accessToken"] : <any>null;
            this.refreshToken = _data["refreshToken"] !== undefined ? _data["refreshToken"] : <any>null;
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["refreshToken"] = this.refreshToken !== undefined ? this.refreshToken : <any>null;
        return data;
    }
}

export interface IAuthResponse {
    accessToken: string;
    refreshToken: string;
}

export class LoginQuery implements ILoginQuery {
    email!: string;
    password!: string;

    constructor(data?: ILoginQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginQuery {
        data = typeof data === 'object' ? data : {};
        let result = new LoginQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginQuery {
    email: string;
    password: string;
}

export class RegisterQuery implements IRegisterQuery {
    name!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterQuery {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface IRegisterQuery {
    name: string;
    email: string;
    password: string;
}

export class RefreshTokenQuery implements IRefreshTokenQuery {
    accessToken!: string;
    refreshToken!: string;

    constructor(data?: IRefreshTokenQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"] !== undefined ? _data["accessToken"] : <any>null;
            this.refreshToken = _data["refreshToken"] !== undefined ? _data["refreshToken"] : <any>null;
        }
    }

    static fromJS(data: any): RefreshTokenQuery {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["refreshToken"] = this.refreshToken !== undefined ? this.refreshToken : <any>null;
        return data;
    }
}

export interface IRefreshTokenQuery {
    accessToken: string;
    refreshToken: string;
}

export class CreateCollectionCommand implements ICreateCollectionCommand {
    title!: string;
    description!: string;
    coverUrl?: string | null;
    topicId!: string;
    ownerId!: string;
    fieldVMs!: FieldVm[];
    currentUserId?: string | null;

    constructor(data?: ICreateCollectionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.topicId = _data["topicId"] !== undefined ? _data["topicId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            if (Array.isArray(_data["fieldVMs"])) {
                this.fieldVMs = [] as any;
                for (let item of _data["fieldVMs"])
                    this.fieldVMs!.push(FieldVm.fromJS(item));
            }
            else {
                this.fieldVMs = <any>null;
            }
            this.currentUserId = _data["currentUserId"] !== undefined ? _data["currentUserId"] : <any>null;
        }
    }

    static fromJS(data: any): CreateCollectionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCollectionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["topicId"] = this.topicId !== undefined ? this.topicId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        if (Array.isArray(this.fieldVMs)) {
            data["fieldVMs"] = [];
            for (let item of this.fieldVMs)
                data["fieldVMs"].push(item.toJSON());
        }
        data["currentUserId"] = this.currentUserId !== undefined ? this.currentUserId : <any>null;
        return data;
    }
}

export interface ICreateCollectionCommand {
    title: string;
    description: string;
    coverUrl?: string | null;
    topicId: string;
    ownerId: string;
    fieldVMs: FieldVm[];
    currentUserId?: string | null;
}

export class FieldVm implements IFieldVm {
    name!: string;
    fieldTypeId!: string;

    constructor(data?: IFieldVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.fieldTypeId = _data["fieldTypeId"] !== undefined ? _data["fieldTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): FieldVm {
        data = typeof data === 'object' ? data : {};
        let result = new FieldVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["fieldTypeId"] = this.fieldTypeId !== undefined ? this.fieldTypeId : <any>null;
        return data;
    }
}

export interface IFieldVm {
    name: string;
    fieldTypeId: string;
}

export class CollectionVm implements ICollectionVm {
    id!: string;
    title!: string;
    description!: string;
    coverUrl?: string | null;
    topicId!: string;
    ownerId!: string;
    fieldVMs!: FieldVm[];

    constructor(data?: ICollectionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.topicId = _data["topicId"] !== undefined ? _data["topicId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            if (Array.isArray(_data["fieldVMs"])) {
                this.fieldVMs = [] as any;
                for (let item of _data["fieldVMs"])
                    this.fieldVMs!.push(FieldVm.fromJS(item));
            }
            else {
                this.fieldVMs = <any>null;
            }
        }
    }

    static fromJS(data: any): CollectionVm {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["topicId"] = this.topicId !== undefined ? this.topicId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        if (Array.isArray(this.fieldVMs)) {
            data["fieldVMs"] = [];
            for (let item of this.fieldVMs)
                data["fieldVMs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICollectionVm {
    id: string;
    title: string;
    description: string;
    coverUrl?: string | null;
    topicId: string;
    ownerId: string;
    fieldVMs: FieldVm[];
}

export class ShortCollectionVm implements IShortCollectionVm {
    id!: string;
    title!: string;
    description!: string;
    coverUrl!: string;
    topicName!: string;
    ownerId!: string;

    constructor(data?: IShortCollectionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.topicName = _data["topicName"] !== undefined ? _data["topicName"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
        }
    }

    static fromJS(data: any): ShortCollectionVm {
        data = typeof data === 'object' ? data : {};
        let result = new ShortCollectionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["topicName"] = this.topicName !== undefined ? this.topicName : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        return data;
    }
}

export interface IShortCollectionVm {
    id: string;
    title: string;
    description: string;
    coverUrl: string;
    topicName: string;
    ownerId: string;
}

export class EditCollectionCommand implements IEditCollectionCommand {
    id!: string;
    title!: string;
    description!: string;
    coverUrl?: string | null;
    topicId!: string;
    ownerId!: string;
    fieldVMs!: FieldVm[];
    currentUserId?: string | null;

    constructor(data?: IEditCollectionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.topicId = _data["topicId"] !== undefined ? _data["topicId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            if (Array.isArray(_data["fieldVMs"])) {
                this.fieldVMs = [] as any;
                for (let item of _data["fieldVMs"])
                    this.fieldVMs!.push(FieldVm.fromJS(item));
            }
            else {
                this.fieldVMs = <any>null;
            }
            this.currentUserId = _data["currentUserId"] !== undefined ? _data["currentUserId"] : <any>null;
        }
    }

    static fromJS(data: any): EditCollectionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditCollectionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["topicId"] = this.topicId !== undefined ? this.topicId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        if (Array.isArray(this.fieldVMs)) {
            data["fieldVMs"] = [];
            for (let item of this.fieldVMs)
                data["fieldVMs"].push(item.toJSON());
        }
        data["currentUserId"] = this.currentUserId !== undefined ? this.currentUserId : <any>null;
        return data;
    }
}

export interface IEditCollectionCommand {
    id: string;
    title: string;
    description: string;
    coverUrl?: string | null;
    topicId: string;
    ownerId: string;
    fieldVMs: FieldVm[];
    currentUserId?: string | null;
}

export class FieldWithTypeNameVm implements IFieldWithTypeNameVm {
    id!: string;
    name!: string;
    typeName!: string;

    constructor(data?: IFieldWithTypeNameVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeName = _data["typeName"] !== undefined ? _data["typeName"] : <any>null;
        }
    }

    static fromJS(data: any): FieldWithTypeNameVm {
        data = typeof data === 'object' ? data : {};
        let result = new FieldWithTypeNameVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        return data;
    }
}

export interface IFieldWithTypeNameVm {
    id: string;
    name: string;
    typeName: string;
}

export class TagVm implements ITagVm {
    id!: string;
    name!: string;

    constructor(data?: ITagVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): TagVm {
        data = typeof data === 'object' ? data : {};
        let result = new TagVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface ITagVm {
    id: string;
    name: string;
}

export class FieldTypeVm implements IFieldTypeVm {
    id!: string;
    name!: string;

    constructor(data?: IFieldTypeVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): FieldTypeVm {
        data = typeof data === 'object' ? data : {};
        let result = new FieldTypeVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IFieldTypeVm {
    id: string;
    name: string;
}

export class CommentVm implements ICommentVm {
    id!: string;
    text!: string;
    creationDate!: Date;
    authorVm!: UserVm;
    itemId!: string;

    constructor(data?: ICommentVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.authorVm = new UserVm();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.authorVm = _data["authorVm"] ? UserVm.fromJS(_data["authorVm"]) : new UserVm();
            this.itemId = _data["itemId"] !== undefined ? _data["itemId"] : <any>null;
        }
    }

    static fromJS(data: any): CommentVm {
        data = typeof data === 'object' ? data : {};
        let result = new CommentVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["authorVm"] = this.authorVm ? this.authorVm.toJSON() : <any>null;
        data["itemId"] = this.itemId !== undefined ? this.itemId : <any>null;
        return data;
    }
}

export interface ICommentVm {
    id: string;
    text: string;
    creationDate: Date;
    authorVm: UserVm;
    itemId: string;
}

export class UserVm implements IUserVm {
    id!: string;
    name!: string;
    email!: string;
    userRole!: string;
    userState!: string;

    constructor(data?: IUserVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userRole = _data["userRole"] !== undefined ? _data["userRole"] : <any>null;
            this.userState = _data["userState"] !== undefined ? _data["userState"] : <any>null;
        }
    }

    static fromJS(data: any): UserVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userRole"] = this.userRole !== undefined ? this.userRole : <any>null;
        data["userState"] = this.userState !== undefined ? this.userState : <any>null;
        return data;
    }
}

export interface IUserVm {
    id: string;
    name: string;
    email: string;
    userRole: string;
    userState: string;
}

export class CreateItemCommand implements ICreateItemCommand {
    title!: string;
    coverUrl?: string | null;
    collectionId!: string;
    tagNames!: string[];
    fullFieldVMs!: FullFieldVm[];
    currentUserId?: string | null;

    constructor(data?: ICreateItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tagNames = [];
            this.fullFieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.collectionId = _data["collectionId"] !== undefined ? _data["collectionId"] : <any>null;
            if (Array.isArray(_data["tagNames"])) {
                this.tagNames = [] as any;
                for (let item of _data["tagNames"])
                    this.tagNames!.push(item);
            }
            else {
                this.tagNames = <any>null;
            }
            if (Array.isArray(_data["fullFieldVMs"])) {
                this.fullFieldVMs = [] as any;
                for (let item of _data["fullFieldVMs"])
                    this.fullFieldVMs!.push(FullFieldVm.fromJS(item));
            }
            else {
                this.fullFieldVMs = <any>null;
            }
            this.currentUserId = _data["currentUserId"] !== undefined ? _data["currentUserId"] : <any>null;
        }
    }

    static fromJS(data: any): CreateItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["collectionId"] = this.collectionId !== undefined ? this.collectionId : <any>null;
        if (Array.isArray(this.tagNames)) {
            data["tagNames"] = [];
            for (let item of this.tagNames)
                data["tagNames"].push(item);
        }
        if (Array.isArray(this.fullFieldVMs)) {
            data["fullFieldVMs"] = [];
            for (let item of this.fullFieldVMs)
                data["fullFieldVMs"].push(item.toJSON());
        }
        data["currentUserId"] = this.currentUserId !== undefined ? this.currentUserId : <any>null;
        return data;
    }
}

export interface ICreateItemCommand {
    title: string;
    coverUrl?: string | null;
    collectionId: string;
    tagNames: string[];
    fullFieldVMs: FullFieldVm[];
    currentUserId?: string | null;
}

export class FullFieldVm implements IFullFieldVm {
    id!: string;
    name!: string;
    typeName!: string;
    value?: string | null;

    constructor(data?: IFullFieldVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeName = _data["typeName"] !== undefined ? _data["typeName"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): FullFieldVm {
        data = typeof data === 'object' ? data : {};
        let result = new FullFieldVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export interface IFullFieldVm {
    id: string;
    name: string;
    typeName: string;
    value?: string | null;
}

export class ShortItemVm implements IShortItemVm {
    id!: string;
    title!: string;
    coverUrl?: string | null;
    collectionId!: string;
    tagNames!: string[];
    fullFieldVMs!: FullFieldVm[];

    constructor(data?: IShortItemVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tagNames = [];
            this.fullFieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.collectionId = _data["collectionId"] !== undefined ? _data["collectionId"] : <any>null;
            if (Array.isArray(_data["tagNames"])) {
                this.tagNames = [] as any;
                for (let item of _data["tagNames"])
                    this.tagNames!.push(item);
            }
            else {
                this.tagNames = <any>null;
            }
            if (Array.isArray(_data["fullFieldVMs"])) {
                this.fullFieldVMs = [] as any;
                for (let item of _data["fullFieldVMs"])
                    this.fullFieldVMs!.push(FullFieldVm.fromJS(item));
            }
            else {
                this.fullFieldVMs = <any>null;
            }
        }
    }

    static fromJS(data: any): ShortItemVm {
        data = typeof data === 'object' ? data : {};
        let result = new ShortItemVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["collectionId"] = this.collectionId !== undefined ? this.collectionId : <any>null;
        if (Array.isArray(this.tagNames)) {
            data["tagNames"] = [];
            for (let item of this.tagNames)
                data["tagNames"].push(item);
        }
        if (Array.isArray(this.fullFieldVMs)) {
            data["fullFieldVMs"] = [];
            for (let item of this.fullFieldVMs)
                data["fullFieldVMs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShortItemVm {
    id: string;
    title: string;
    coverUrl?: string | null;
    collectionId: string;
    tagNames: string[];
    fullFieldVMs: FullFieldVm[];
}

export enum SearchBy {
    Title = 0,
    Tag = 1,
    Comment = 2,
}

export class ItemVm implements IItemVm {
    id!: string;
    title!: string;
    coverUrl?: string | null;
    creationDate!: Date;
    collectionId!: string;
    usersItemVm!: UsersItemVm;
    tagVMs!: TagVm[];
    fullFieldVMs!: FullFieldVm[];
    ownerId!: string;

    constructor(data?: IItemVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.usersItemVm = new UsersItemVm();
            this.tagVMs = [];
            this.fullFieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.collectionId = _data["collectionId"] !== undefined ? _data["collectionId"] : <any>null;
            this.usersItemVm = _data["usersItemVm"] ? UsersItemVm.fromJS(_data["usersItemVm"]) : new UsersItemVm();
            if (Array.isArray(_data["tagVMs"])) {
                this.tagVMs = [] as any;
                for (let item of _data["tagVMs"])
                    this.tagVMs!.push(TagVm.fromJS(item));
            }
            else {
                this.tagVMs = <any>null;
            }
            if (Array.isArray(_data["fullFieldVMs"])) {
                this.fullFieldVMs = [] as any;
                for (let item of _data["fullFieldVMs"])
                    this.fullFieldVMs!.push(FullFieldVm.fromJS(item));
            }
            else {
                this.fullFieldVMs = <any>null;
            }
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
        }
    }

    static fromJS(data: any): ItemVm {
        data = typeof data === 'object' ? data : {};
        let result = new ItemVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["collectionId"] = this.collectionId !== undefined ? this.collectionId : <any>null;
        data["usersItemVm"] = this.usersItemVm ? this.usersItemVm.toJSON() : <any>null;
        if (Array.isArray(this.tagVMs)) {
            data["tagVMs"] = [];
            for (let item of this.tagVMs)
                data["tagVMs"].push(item.toJSON());
        }
        if (Array.isArray(this.fullFieldVMs)) {
            data["fullFieldVMs"] = [];
            for (let item of this.fullFieldVMs)
                data["fullFieldVMs"].push(item.toJSON());
        }
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        return data;
    }
}

export interface IItemVm {
    id: string;
    title: string;
    coverUrl?: string | null;
    creationDate: Date;
    collectionId: string;
    usersItemVm: UsersItemVm;
    tagVMs: TagVm[];
    fullFieldVMs: FullFieldVm[];
    ownerId: string;
}

export class UsersItemVm implements IUsersItemVm {
    countOfLikes!: number;
    isLiked!: boolean;

    constructor(data?: IUsersItemVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countOfLikes = _data["countOfLikes"] !== undefined ? _data["countOfLikes"] : <any>null;
            this.isLiked = _data["isLiked"] !== undefined ? _data["isLiked"] : <any>null;
        }
    }

    static fromJS(data: any): UsersItemVm {
        data = typeof data === 'object' ? data : {};
        let result = new UsersItemVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countOfLikes"] = this.countOfLikes !== undefined ? this.countOfLikes : <any>null;
        data["isLiked"] = this.isLiked !== undefined ? this.isLiked : <any>null;
        return data;
    }
}

export interface IUsersItemVm {
    countOfLikes: number;
    isLiked: boolean;
}

export class EditItemCommand implements IEditItemCommand {
    id!: string;
    title!: string;
    coverUrl?: string | null;
    collectionId!: string;
    tagNames!: string[];
    fullFieldVMs!: FullFieldVm[];
    currentUserId?: string | null;

    constructor(data?: IEditItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tagNames = [];
            this.fullFieldVMs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.coverUrl = _data["coverUrl"] !== undefined ? _data["coverUrl"] : <any>null;
            this.collectionId = _data["collectionId"] !== undefined ? _data["collectionId"] : <any>null;
            if (Array.isArray(_data["tagNames"])) {
                this.tagNames = [] as any;
                for (let item of _data["tagNames"])
                    this.tagNames!.push(item);
            }
            else {
                this.tagNames = <any>null;
            }
            if (Array.isArray(_data["fullFieldVMs"])) {
                this.fullFieldVMs = [] as any;
                for (let item of _data["fullFieldVMs"])
                    this.fullFieldVMs!.push(FullFieldVm.fromJS(item));
            }
            else {
                this.fullFieldVMs = <any>null;
            }
            this.currentUserId = _data["currentUserId"] !== undefined ? _data["currentUserId"] : <any>null;
        }
    }

    static fromJS(data: any): EditItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["coverUrl"] = this.coverUrl !== undefined ? this.coverUrl : <any>null;
        data["collectionId"] = this.collectionId !== undefined ? this.collectionId : <any>null;
        if (Array.isArray(this.tagNames)) {
            data["tagNames"] = [];
            for (let item of this.tagNames)
                data["tagNames"].push(item);
        }
        if (Array.isArray(this.fullFieldVMs)) {
            data["fullFieldVMs"] = [];
            for (let item of this.fullFieldVMs)
                data["fullFieldVMs"].push(item.toJSON());
        }
        data["currentUserId"] = this.currentUserId !== undefined ? this.currentUserId : <any>null;
        return data;
    }
}

export interface IEditItemCommand {
    id: string;
    title: string;
    coverUrl?: string | null;
    collectionId: string;
    tagNames: string[];
    fullFieldVMs: FullFieldVm[];
    currentUserId?: string | null;
}

export class Topic implements ITopic {
    id!: string;
    name!: string;

    constructor(data?: ITopic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): Topic {
        data = typeof data === 'object' ? data : {};
        let result = new Topic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface ITopic {
    id: string;
    name: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}